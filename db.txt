# ========== 1. STATE DEFINITION & INITIALIZATION ==========
class AgentState(TypedDict):
    order_id: str
    current_step: Literal['analyze', 'resubmission', 'esim', 'switch', 'human', 'validation', 'complete']
    problem: str
    resolution: str
    validation_result: str
    retry_count: int

def create_initial_state(order_id: str) -> AgentState:
    """Guaranteed valid initial state"""
    return {
        'order_id': order_id,
        'current_step': 'analyze',
        'problem': '',
        'resolution': '',
        'validation_result': '',
        'retry_count': 0
    }

# ========== 2. STATE MANAGEMENT DECORATOR ==========
def state_updater(func):
    """Enforces state integrity"""
    def wrapper(state: AgentState) -> AgentState:
        try:
            # Ensure input state validity
            full_state = create_initial_state(state['order_id'])
            full_state.update(state)
            
            # Execute agent
            result = func(full_state)
            
            # Ensure output state validity
            if 'current_step' not in result:
                result['current_step'] = full_state['current_step']  # Fallback
            return {**full_state, **result}
        except Exception as e:
            print(f"State error: {str(e)}")
            return {
                **full_state,
                'current_step': 'human',
                'problem': f"State corruption: {str(e)}"
            }
    return wrapper

# ========== 3. AGENT IMPLEMENTATIONS ==========
@state_updater
def master_agent(state: AgentState) -> AgentState:
    try:
        tools = TelecomTools()
        status = tools.get_full_status(state['order_id'])
        tools.log_fallout(state['order_id'], "detected")
        
        response = model.invoke(master_prompt.format(
            order_id=state['order_id'],
            activation=status['activation'],
            esim=status['esim'],
            switch=status['switch']
        ))
        
        # Decision parsing with validation
        decision = re.search(r'\[(.*?)\]', response.content)
        decision = decision.group(1).lower() if decision else 'human'
        valid_decisions = ['resubmission', 'esim', 'switch']
        
        return {
            'current_step': decision if decision in valid_decisions else 'human',
            'problem': response.content[:500]  # Truncate if needed
        }
    except Exception as e:
        return {
            'current_step': 'human',
            'problem': f"Master Agent Error: {str(e)}"
        }

@state_updater
def resubmission_agent(state: AgentState) -> AgentState:
    TelecomTools.update_status(state['order_id'], 'activation_status', 'pending')
    return {
        'current_step': 'validation',
        'resolution': 'Activation resubmitted'
    }

@state_updater 
def esim_agent(state: AgentState) -> AgentState:
    TelecomTools.update_status(state['order_id'], 'esim_status', 'reprovisioned')
    return {
        'current_step': 'validation',
        'resolution': 'eSIM reprovisioned'
    }

@state_updater
def switch_agent(state: AgentState) -> AgentState:
    TelecomTools.update_status(state['order_id'], 'switch_status', 'reconfigured')
    return {
        'current_step': 'validation',
        'resolution': 'Switch reconfigured'
    }

@state_updater
def validation_agent(state: AgentState) -> AgentState:
    status = TelecomTools.get_full_status(state['order_id'])
    valid = all([
        status['activation'] == 'pending',
        status['esim'] == 'reprovisioned',
        status['switch'] == 'reconfigured'
    ])
    return {
        'current_step': 'complete' if valid else 'human',
        'validation_result': 'Success' if valid else 'Failed'
    }

@state_updater
def human_agent(state: AgentState) -> AgentState:
    print(f"\nHUMAN REVIEW NEEDED: {state['order_id']}")
    print(f"Problem: {state.get('problem', 'Unknown')}")
    action = input("1. Approve\n2. Reject\nChoice: ")
    return {
        'current_step': 'complete',
        'resolution': 'Human approved' if action == '1' else 'Human rejected'
    }

# ========== 4. WORKFLOW SETUP ==========
workflow = StateGraph(AgentState)

nodes = {
    'analyze': master_agent,
    'resubmission': resubmission_agent,
    'esim': esim_agent,
    'switch': switch_agent,
    'validation': validation_agent,
    'human': human_agent,
    'complete': lambda s: s  # Terminal node
}

for name, agent in nodes.items():
    workflow.add_node(name, agent)

workflow.set_entry_point("analyze")

# Conditional transitions
workflow.add_conditional_edges(
    "analyze",
    lambda s: s['current_step'],
    {k: k for k in ['resubmission', 'esim', 'switch', 'human']}
)

for step in ['resubmission', 'esim', 'switch']:
    workflow.add_edge(step, "validation")

workflow.add_conditional_edges(
    "validation",
    lambda s: s['current_step'],
    {'complete': 'complete', 'human': 'human'}
)

workflow.add_edge("human", "complete")
workflow.add_edge("complete", END)

app = workflow.compile()

# ========== 5. TEST EXECUTION ==========
def run_test(order_id):
    print(f"\nðŸš€ STARTING PROCESSING FOR {order_id}")
    state = create_initial_state(order_id)
    
    for step in app.stream(state):
        print(f"\n[{step['current_step'].upper()}]")
        print(f"Problem: {step.get('problem', '')}")
        print(f"Resolution: {step.get('resolution', '')}")
        print(f"Validation: {step.get('validation_result', '')}")
        print("Database Status:", TelecomTools.get_full_status(order_id))
    
    print("\nâœ… FINAL STATE")
    print("Order Status:", TelecomTools.get_full_status(order_id))
    print("Fallout Records:", pd.read_sql(f"SELECT * FROM fallouts WHERE order_id = '{order_id}'", db_manager.conn))
    print("="*60)

# Execute test cases
for order_id in ["ORD123", "ORD456", "ORD789", "ORD999"]:
    run_test(order_id)
    input("Press Enter to continue...")
