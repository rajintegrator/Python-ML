# ========== 1. STATE DEFINITION (REVISED) ==========
class AgentState(TypedDict):
    order_id: str
    current_step: Literal[
        'start',
        'analyze',
        'resubmit', 
        'esim', 
        'switch', 
        'validation_check',
        'human_intervention',
        'complete'
    ]
    problem_description: str
    action_taken: str
    validation_status: str
    attempt_count: int

def create_initial_state(order_id: str) -> AgentState:
    return {
        'order_id': order_id,
        'current_step': 'start',
        'problem_description': '',
        'action_taken': '',
        'validation_status': '',
        'attempt_count': 0
    }

# ========== 2. WORKFLOW NODES (UPDATED NAMES) ==========
workflow = StateGraph(AgentState)

workflow.add_node("start", lambda s: {'current_step': 'analyze'})
workflow.add_node("analyze", analyze_agent)
workflow.add_node("resubmit", resubmit_agent)
workflow.add_node("esim", esim_agent)
workflow.add_node("switch", switch_agent)
workflow.add_node("validation_check", validate_agent)  # Renamed node
workflow.add_node("human_intervention", human_agent)    # Renamed node
workflow.add_node("complete", END)

# ========== 3. VALIDATION AGENT (FIXED KEY) ==========
@state_protector
def validate_agent(state: AgentState) -> AgentState:
    status = system.get_status(state['order_id'])
    valid = all([
        status['activation'] == 'pending',
        status['esim'] == 'reprovisioned',
        status['switch'] == 'reconfigured'
    ])
    return {
        'current_step': 'complete' if valid else 'human_intervention',
        'validation_status': 'Success' if valid else 'Failed'  # Correct key
    }

# ========== 4. WORKFLOW TRANSITIONS (UPDATED) ==========
workflow.add_conditional_edges(
    "analyze",
    lambda s: s['current_step'],
    {
        'resubmit': 'resubmit',
        'esim': 'esim',
        'switch': 'switch',
        'human_intervention': 'human_intervention'
    }
)

for step in ['resubmit', 'esim', 'switch']:
    workflow.add_edge(step, "validation_check")

workflow.add_conditional_edges(
    "validation_check",
    lambda s: s['current_step'],
    {'complete': 'complete', 'human_intervention': 'human_intervention'}
)

workflow.add_edge("human_intervention", "complete")





def test_order(order_id):
    print(f"\n⚡ Testing {order_id}")
    state = create_initial_state(order_id)
    
    for step in app.stream(state):
        print(f"\n[{step['current_step'].upper()}]")
        print(f"Problem: {step.get('problem_description', '')}")
        print(f"Action: {step.get('action_taken', '')}")
        print(f"Validation: {step.get('validation_status', '')}")
    
    print("\n✅ Test Complete")
    print("Final Status:", system.get_status(order_id))
    print("="*60)

test_order("ORD123")
test_order("ORD456")
