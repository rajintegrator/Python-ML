# ========== PROPER STATE HANDLING ==========
class AgentState(TypedDict):
    order_id: str
    current_step: Literal[
        'analyze',
        'resubmission', 
        'esim', 
        'switch', 
        'human',
        'validation',
        'complete'
    ]
    problem: str
    resolution: str
    validation_result: str
    retry_count: int

def state_updater(func):
    """Decorator to maintain full state structure"""
    def wrapper(state: AgentState) -> AgentState:
        new_state = state.copy()
        result = func(new_state)
        return {**new_state, **result}
    return wrapper

# ========== UPDATED AGENTS ==========
@state_updater
def master_agent(state: AgentState) -> AgentState:
    try:
        tools = TelecomTools()
        status = tools.get_full_status(state['order_id'])
        tools.log_fallout(state['order_id'], "initial_detection")
        
        response = model.invoke(master_prompt.format(
            order_id=state['order_id'],
            activation=status['activation'],
            esim=status['esim'],
            switch=status['switch']
        ))
        
        # Parse decision
        decision = 'human'
        if match := re.search(r'\[(.*?)\]', response.content):
            decision = match.group(1).lower()
            
        return {
            'current_step': decision if decision in ['resubmission', 'esim', 'switch'] else 'human',
            'problem': response.content
        }
    except Exception as e:
        return {
            'current_step': 'human',
            'problem': f"Error: {str(e)}"
        }

@state_updater
def resubmission_agent(state: AgentState) -> AgentState:
    TelecomTools.update_status(state['order_id'], 'activation_status', 'pending')
    return {
        'current_step': 'validation',
        'resolution': 'Activation resubmitted'
    }

@state_updater 
def esim_agent(state: AgentState) -> AgentState:
    TelecomTools.update_status(state['order_id'], 'esim_status', 'reprovisioned')
    return {
        'current_step': 'validation',
        'resolution': 'eSIM reprovisioned'
    }

@state_updater
def switch_agent(state: AgentState) -> AgentState:
    TelecomTools.update_status(state['order_id'], 'switch_status', 'reconfigured')
    return {
        'current_step': 'validation',
        'resolution': 'Switch reconfigured'
    }

@state_updater
def validation_agent(state: AgentState) -> AgentState:
    status = TelecomTools.get_full_status(state['order_id'])
    valid = all([
        status['activation'] == 'pending',
        status['esim'] == 'reprovisioned',
        status['switch'] == 'reconfigured'
    ])
    return {
        'current_step': 'complete' if valid else 'human',
        'validation_result': 'Success' if valid else 'Failed'
    }

@state_updater
def human_agent(state: AgentState) -> AgentState:
    print(f"\nHuman review needed for {state['order_id']}")
    action = input("1. Approve\n2. Reject\nChoice: ")
    return {
        'current_step': 'complete',
        'resolution': 'Human approved' if action == '1' else 'Human rejected'
    }

# ========== WORKFLOW SETUP ==========
workflow = StateGraph(AgentState)

workflow.add_node("analyze", master_agent)
workflow.add_node("resubmission", resubmission_agent)
workflow.add_node("esim", esim_agent)
workflow.add_node("switch", switch_agent)
workflow.add_node("validation", validation_agent)
workflow.add_node("human", human_agent)
workflow.add_node("complete", lambda state: state)

workflow.set_entry_point("analyze")

workflow.add_conditional_edges(
    "analyze",
    lambda state: state['current_step'],
    {
        'resubmission': 'resubmission',
        'esim': 'esim',
        'switch': 'switch',
        'human': 'human'
    }
)

for step in ["resubmission", "esim", "switch"]:
    workflow.add_edge(step, "validation")

workflow.add_conditional_edges(
    "validation",
    lambda state: state['current_step'],
    {
        'complete': 'complete',
        'human': 'human'
    }
)

workflow.add_edge("human", "complete")
workflow.add_edge("complete", END)

app = workflow.compile()
