# ========== 1. PROPER STATE DEFINITION ==========
class AgentState(TypedDict):
    order_id: str
    current_step: Literal[
        'analyze',
        'resubmission', 
        'esim', 
        'switch', 
        'human',
        'validation',
        'complete'
    ]
    problem: str
    resolution: str
    validation_result: str
    retry_count: int
    raw_data: dict

# ========== 2. STATE INITIALIZATION ==========
def create_initial_state(order_id: str) -> AgentState:
    return {
        'order_id': order_id,
        'current_step': 'analyze',
        'problem': '',
        'resolution': '',
        'validation_result': '',
        'retry_count': 0,
        'raw_data': {}
    }

# ========== 3. ENHANCED MASTER AGENT ==========
def master_agent(state: AgentState) -> AgentState:
    tools = TelecomTools()
    new_state = state.copy()
    
    try:
        order_id = state['order_id']
        status = tools.get_full_status(order_id)
        new_state['raw_data']['status'] = status
        
        response = model.invoke(master_prompt.format(
            order_id=order_id,
            activation=status['activation'],
            esim=status['esim'],
            switch=status['switch']
        ))
        
        # Enhanced parsing with fallbacks
        decision = 'human'
        if 'resubmission' in response.content.lower():
            decision = 'resubmission'
        elif 'esim' in response.content.lower():
            decision = 'esim'
        elif 'switch' in response.content.lower():
            decision = 'switch'
            
        new_state.update({
            'current_step': decision,
            'problem': response.content,
            'raw_data': {'llm_response': response.content}
        })
        
    except Exception as e:
        new_state.update({
            'current_step': 'human',
            'problem': f"Error: {str(e)}",
            'validation_result': 'failed'
        })
    
    return new_state

# ========== 4. WORKFLOW SETUP ==========
workflow = StateGraph(AgentState)

# Add nodes with state validation
def state_wrapper(func):
    def wrapper(state):
        result = func(state)
        return {**state, **result}  # Maintain full state
    return wrapper

workflow.add_node("analyze", state_wrapper(master_agent))
workflow.add_node("resubmission", state_wrapper(resubmission_agent))
workflow.add_node("esim", state_wrapper(esim_agent))
workflow.add_node("switch", state_wrapper(switch_agent))
workflow.add_node("human", state_wrapper(human_review))
workflow.add_node("validation", state_wrapper(validation_agent))

# Set conditional edges
workflow.add_conditional_edges(
    "analyze",
    lambda state: state['current_step'],
    {
        'resubmission': 'resubmission',
        'esim': 'esim', 
        'switch': 'switch',
        'human': 'human'
    }
)

# Add validation step after each action
for step in ['resubmission', 'esim', 'switch']:
    workflow.add_edge(step, 'validation')

workflow.add_conditional_edges(
    'validation',
    lambda state: 'human' if 'fail' in state['validation_result'] else 'complete',
    {'complete': END, 'human': 'human'}
)

workflow.set_entry_point("analyze")
app = workflow.compile()

# ========== 5. TEST EXECUTION ==========
def run_test(order_id):
    print(f"\nðŸš€ Processing {order_id}")
    state = create_initial_state(order_id)
    
    for step in app.stream(state):
        print(f"\nSTEP: {step['current_step']}")
        print(f"STATUS: {TelecomTools.get_full_status(order_id)}")
        print(f"STATE: { {k:v for k,v in step.items() if k != 'raw_data'} }")
    
    print("\nðŸ”¥ Final State:")
    print(pd.read_sql(f"SELECT * FROM orders WHERE order_id = '{order_id}'", conn))
    print(pd.read_sql(f"SELECT * FROM fallouts WHERE order_id = '{order_id}'", conn))

# Run tests
run_test("ORD123")
run_test("ORD456")
run_test("ORD789") 
run_test("ORD999")
